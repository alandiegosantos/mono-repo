package main

import (
	"bytes"
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
	networkingv1beta1 "istio.io/api/networking/v1beta1"
	"istio.io/client-go/pkg/apis/networking/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	kjson "k8s.io/apimachinery/pkg/runtime/serializer/json"

	servicemeshoptions "github.com/alandiegosantos/monorepo/proto/servicemesh"
)

const baseRepoName string = "github.com/alandiegosantos/monorepo"

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}

	objs := make([]runtime.Object, 0, len(file.Services)*3)
	for _, service := range file.Services {
		svcObjects, err := genService(gen, file, service)
		if err != nil {
			panic(err)
		}
		objs = append(objs, svcObjects...)
	}

	filename := strings.TrimPrefix(file.GeneratedFilenamePrefix, baseRepoName) + "_istio.yaml"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("# Code generated by protoc-gen-istio. DO NOT EDIT.")
	g.P("# - protoc-gen-istio v", version)
	g.P("# - protoc             ", protocVersion(gen))
	encoder := kjson.NewYAMLSerializer(kjson.DefaultMetaFactory, nil, nil)
	var buf bytes.Buffer

	for _, obj := range objs {
		if err := encoder.Encode(obj, &buf); err != nil {
			panic(err.Error())
		}
		g.P(buf.String())
		g.P("-----")
	}

	return g
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

func genService(gen *protogen.Plugin, file *protogen.File, service *protogen.Service) ([]runtime.Object, error) {
	options := service.Desc.Options().(*descriptorpb.ServiceOptions)
	smOptions := proto.GetExtension(options, servicemeshoptions.E_Service).(*servicemeshoptions.ServiceConfiguration)

	objs := make([]runtime.Object, 0)
	objs = append(objs, &v1beta1.DestinationRule{
		TypeMeta: metav1.TypeMeta{
			Kind:       "DestinationRule",
			APIVersion: "networking.istio.io/v1alpha3",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name:   fmt.Sprintf("%s-%s-dr", file.GoPackageName, service.GoName),
			Labels: map[string]string{},
		},
		Spec: networkingv1beta1.DestinationRule{
			Host: smOptions.Host,
		},
	})

	return objs, nil
}
